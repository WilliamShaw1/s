clear;  clc;

% 初始地图
G=[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1;
   1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1;
   1 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1;
   1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1;
   1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1];
% 写出任意两点之间的信息
% D近邻栅格间的距离,IXY节点编号的坐标
% IP近邻栅格的编号,GX节点编号的位置
[D,IXY,IP,GX]=G2D(G);
% 写出栅格的邻接矩阵
DN=size(D,1);
for km=1:DN
    pp=IP(km,:);
    po=find(pp>0.5);
    kn=pp(po);
    for kk=1:length(po)
        A(km,kn(kk))=D(km,po(kk));
        A(kn(kk),km)=D(km,po(kk));
    end
end
% 邻接矩阵变为权值矩阵
W=Adm2Wvm(A);
% 写出全联通矩阵
[DD,SS,RR]=Dijkstra(W);
CT=[1:size(W,1)]';
% 经过点的坐标
XY=[2,2;7,3;7,13;12,19;20,12;25,22;31,13;39,13;42,8;30,5;...
    41,2;12,23;22,23;32,22;42,22;20,5;4,22;24,19;11,14;37,12;...
    37,10];
% 上述坐标点对应的编号
XYP=[];
for k=1:size(XY,1)
    ds=IXY-repmat(XY(k,:),size(IXY,1),1);
    DS=abs(ds(:,1)+1j*ds(:,2));
    PO=find(DS<1e-8);
    XYP=[XYP,PO];
end
% 保存数据
save('CD.mat');

% 加载数据
load('CD.mat');

tic;
% 经典的蚁群算法
rng(1);
% 初始化参数
M=10;                       %蚂蚁数量
IT=100;                     %最大迭代次数
alpha=2;                    %信息素重要程度因子
beta=2;                     %启发函数重要程度因子
rho=0.2;                    %信息素挥发因子
Q=1;                        %常系数
% 蚁群算法计算出初始的回路
CT=XYP;
DDA=DD(XYP,XYP);
[Rbest,SRN,SR,SL,Lbest,Lave]=ant1Dad(CT,DDA,M,IT,alpha,beta,rho,Q);
pause(1);
t1=toc;
% 写出真实路径
R=[];
for k=2:length(SRN)
    rr=RR{SRN(k-1),SRN(k)};
    R=[R,rr(1:end-1)];
end
R=[R,SRN(end)];
% 画出图形
figure;
plot2grid(G,GX,R);hold on;
plot(XY(:,1)+0.5,XY(:,2)+0.5,'r.','MarkerSize',10);
title(['经典蚁群算法旅行商运动轨迹,L=',num2str(SL)]);

tic;
% 蚁群算法和遗传算法结合的算法
rng(1);
% 初始化参数
M=10;                                       %蚂蚁数量
IT1=30;                                     %最大迭代次数
alpha=2;                                    %信息素重要程度因子
beta=2;                                     %启发函数重要程度因子
rho=0.2;                                    %信息素挥发因子
Q=1;                                        %常系数
% 蚁群算法计算出初始的回路
[Rbest,SRN,SR,SL1,Lbest1,Lave1]=ant1Dad(CT,DDA,M,IT1,alpha,beta,rho,Q);
% 遗传算法计算出最佳回路
IT2=70;              % 迭代次数
Ps=0.2;             % 优秀个体率
Pc=0.8;             % 交叉概率
Pm=0.05;            % 变异概率
[RSN,RS,DS,Lbest2,Lave2]=GATSPad(Rbest,CT,DDA,IT2,Ps,Pc,Pm);
t2=toc;

% 写出真实路径
R1=[];
for k=2:length(RSN)
    rr=RR{RSN(k-1),RSN(k)};
    R1=[R1,rr(1:end-1)];
end
R1=[R1,RSN(end)];
% 画出图形
figure;
plot2grid(G,GX,R1);hold on;
plot(XY(:,1)+0.5,XY(:,2)+0.5,'r.','MarkerSize',10);
title(['蚁群算法和遗传算法结合的旅行商运动轨迹,L=',num2str(DS)]);

% 迭代图(航迹最优值)
figure;
plot([1:IT],Lbest);hold on;
plot([1:IT1+IT2],[Lbest1;Lbest2]);
xlabel('迭代次数');
ylabel('迭代结果');
title('航迹最优值的迭代图');
legend('经典蚁群算法','蚁群与遗传结合算法');

% 迭代图（航迹平均值）
figure;
plot([1:IT],Lave);hold on;
plot([1:IT1+IT2],[Lave1;Lave2]);
xlabel('迭代次数');
ylabel('迭代结果');
title('航迹平均值的迭代图');
legend('经典蚁群算法','蚁群与遗传结合算法');

% 运行时间
disp(['经典蚁群算法的运行时间:',num2str(t1),'秒']);
disp(['蚁群与遗传结合算法的运行时间:',num2str(t2),'秒']);